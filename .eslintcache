[{"C:\\projects\\sports-pickem-app\\src\\index.js":"1","C:\\projects\\sports-pickem-app\\src\\App.js":"2","C:\\projects\\sports-pickem-app\\src\\reportWebVitals.js":"3","C:\\projects\\sports-pickem-app\\src\\components\\VersusJumbo\\VersusJumbo.js":"4","C:\\projects\\sports-pickem-app\\src\\components\\LoadScreen\\LoadScreen.js":"5","C:\\projects\\sports-pickem-app\\src\\components\\ChooseSeason\\ChooseSeason.js":"6","C:\\projects\\sports-pickem-app\\src\\graphql.js":"7","C:\\projects\\sports-pickem-app\\src\\components\\Game\\PickCard\\PickCard.js":"8","C:\\projects\\sports-pickem-app\\src\\components\\Game\\SubmitPicks\\SubmitPicks.js":"9","C:\\projects\\sports-pickem-app\\src\\components\\Game\\Game.js":"10","C:\\projects\\sports-pickem-app\\src\\components\\ChooseSeason\\SeasonTab.js":"11","C:\\projects\\sports-pickem-app\\src\\components\\Game\\GameLogic.js":"12","C:\\projects\\sports-pickem-app\\src\\components\\Game\\PickCard\\PickButton.js":"13","C:\\projects\\sports-pickem-app\\src\\components\\Banner\\Banner.js":"14","C:\\projects\\sports-pickem-app\\src\\components\\Results\\Results.js":"15","C:\\projects\\sports-pickem-app\\src\\components\\Results\\ResultsLogic.js":"16","C:\\projects\\sports-pickem-app\\src\\components\\services.js":"17","C:\\projects\\sports-pickem-app\\src\\components\\Record\\Record.js":"18","C:\\projects\\sports-pickem-app\\src\\components\\Record\\SeasonRecord.js":"19","C:\\projects\\sports-pickem-app\\src\\components\\Record\\RecordLogic.js":"20"},{"size":894,"mtime":1611362919492,"results":"21","hashOfConfig":"22"},{"size":2394,"mtime":1611558669729,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":227,"mtime":1611292081945,"results":"25","hashOfConfig":"22"},{"size":475,"mtime":1611292081944,"results":"26","hashOfConfig":"22"},{"size":1051,"mtime":1611368072901,"results":"27","hashOfConfig":"22"},{"size":472,"mtime":1611368874326,"results":"28","hashOfConfig":"22"},{"size":1531,"mtime":1611521150397,"results":"29","hashOfConfig":"22"},{"size":280,"mtime":1611360532933,"results":"30","hashOfConfig":"22"},{"size":2086,"mtime":1611555754754,"results":"31","hashOfConfig":"22"},{"size":444,"mtime":1611583894776,"results":"32","hashOfConfig":"22"},{"size":1350,"mtime":1611557503810,"results":"33","hashOfConfig":"22"},{"size":391,"mtime":1611582014496,"results":"34","hashOfConfig":"22"},{"size":1035,"mtime":1611584017139,"results":"35","hashOfConfig":"22"},{"size":1578,"mtime":1611582056721,"results":"36","hashOfConfig":"22"},{"size":1235,"mtime":1611540445956,"results":"37","hashOfConfig":"22"},{"size":121,"mtime":1611541976469,"results":"38","hashOfConfig":"22"},{"size":936,"mtime":1611582830112,"results":"39","hashOfConfig":"22"},{"size":635,"mtime":1611582911488,"results":"40","hashOfConfig":"22"},{"size":186,"mtime":1611560613094,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1nwuhvc",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\projects\\sports-pickem-app\\src\\index.js",[],["89","90"],"C:\\projects\\sports-pickem-app\\src\\App.js",["91","92"],"import { useEffect, useState } from \"react\";\r\nimport { useRoutes, navigate } from 'hookrouter';\r\nimport { GET_SEASONS } from './graphql';\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { playAgain, resetGame, resetSeason } from './components/Game/GameLogic'\r\nimport LoadScreen from \"./components/LoadScreen/LoadScreen\";\r\nimport ChooseSeason from \"./components/ChooseSeason/ChooseSeason\";\r\nimport Game from './components/Game/Game';\r\nimport Results from './components/Results/Results';\r\nimport Banner from './components/Banner/Banner';\r\nimport './App.css';\r\nimport Record from \"./components/Record/Record\";\r\n\r\nfunction App() {\r\n\r\n  const { loading, error, data } = useQuery(GET_SEASONS);\r\n  const [seasons, setSeasons] = useState();\r\n  const [chosenSeason, setChosenSeason] = useState();\r\n  const [events, setEvents] = useState();\r\n  const [randomPicks, setRandomPicks] = useState();\r\n  const [newGame, setNewGame] = useState(true);\r\n\r\n  const [picks, setPicks] = useState({\r\n    0: null,\r\n    1: null,\r\n    2: null,\r\n    3: null\r\n  });\r\n\r\n  const [record, setRecord] = useState({\r\n    overall: {\r\n      correct: 0,\r\n      total: 0,\r\n    },\r\n    years: {}\r\n  });\r\n  \r\n  const routes = {\r\n    '/': () => <ChooseSeason seasons={seasons} setChosenSeason={setChosenSeason}/>,\r\n\r\n    '/playGame' : () => <Game chosenSeason={chosenSeason} setEvents={setEvents} events={events} setRandomPicks={setRandomPicks} randomPicks={randomPicks} picks={picks} setPicks={setPicks} newGame={newGame} setNewGame={setNewGame}/>,\r\n\r\n    '/results' : () => <Results picks={picks} randomEvents={randomPicks} record={record} setRecord={setRecord} chosenSeason={chosenSeason} \r\n      resetSeason={() => {\r\n        resetSeason(picks, setPicks, setRandomPicks);\r\n      }}\r\n      playAgain={() => {\r\n        playAgain(picks, setPicks);\r\n      }}\r\n      resetGame={() => {\r\n        resetGame(picks, setPicks, record, setRecord, setChosenSeason);\r\n      }}\r\n    />,\r\n    '/record' : () => <Record record={record}/>\r\n  }\r\n  \r\n  const routeResult = useRoutes(routes);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n      if(data) {\r\n          setSeasons(data.baseseasons);\r\n      }\r\n  }, [data]);\r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"App bg-light\">\r\n      <Banner year={chosenSeason} />\r\n      {\r\n        loading ? \r\n          <LoadScreen /> : routeResult\r\n      }\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\projects\\sports-pickem-app\\src\\reportWebVitals.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\VersusJumbo\\VersusJumbo.js",[],["93","94"],"C:\\projects\\sports-pickem-app\\src\\components\\LoadScreen\\LoadScreen.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\ChooseSeason\\ChooseSeason.js",["95","96","97"],"import { useQuery } from '@apollo/react-hooks';\r\nimport { useEffect, useState } from 'react';\r\nimport SeasonTab from './SeasonTab';\r\n\r\n\r\nconst ChooseSeason = (props) => {\r\n\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row'>\r\n                <div className='col-12'>\r\n                    <h3>Choose Historic NFL Season</h3>\r\n                </div>\r\n                <div className='col-12'>\r\n                    <div className='list-group'>\r\n                        {\r\n                            props.seasons ?\r\n                                props.seasons.map((val) => {\r\n                                    return (\r\n                                        <SeasonTab seasonYear={val.strSeason} setChosenSeason={props.setChosenSeason}/>\r\n                                    )\r\n                                }) :\r\n                                null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChooseSeason","C:\\projects\\sports-pickem-app\\src\\graphql.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Game\\PickCard\\PickCard.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Game\\SubmitPicks\\SubmitPicks.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Game\\Game.js",["98","99","100","101","102"],"import { useEffect, useState } from \"react\";\r\nimport { useQuery, useSubscription } from '@apollo/react-hooks';\r\nimport { GET_SEASON } from '../../graphql';\r\nimport LoadScreen from \"../LoadScreen/LoadScreen\";\r\nimport { getUniqueRandoms } from \"./GameLogic\";\r\nimport PickCard from './PickCard/PickCard';\r\nimport './Game.css';\r\nimport { navigate } from \"hookrouter\";\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n    \r\n    const { loading, error, data } = useQuery(GET_SEASON, {\r\n        variables: { year: props.chosenSeason }\r\n    });\r\n    const [allAnswered, setAllAnswered] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        if(data && props.newGame) {\r\n            console.log('you shouldnt see this on the second round')\r\n            props.setEvents(data.season.events);\r\n            props.setNewGame(!props.newGame);\r\n        }\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        if(props.events) {\r\n            console.log('i ran')\r\n            let picks = getUniqueRandoms(props.events, 4);\r\n            props.setRandomPicks(picks);\r\n        }\r\n    }, [props.events]);\r\n\r\n    useEffect(() => {\r\n        for(let x in props.picks) {\r\n            if(!props.picks[x]) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        setAllAnswered(true)\r\n    }, [props.picks]);\r\n\r\n    \r\n\r\n\r\n\r\n    if(!props.randomPicks) return <LoadScreen />\r\n    else {\r\n        return (\r\n            <div className='container-fluid'>\r\n                <div className='row pt-4'>\r\n                        {props.randomPicks.map((val, ind) => {\r\n                            return <PickCard pickQuestion={val.strEvent} choiceA={val.strHomeTeam} choiceB={val.strAwayTeam} date={val.dateEvent} setPicks={props.setPicks} picks={props.picks} ind={ind}/>\r\n                        })}\r\n                    <button type='button' className={`btn-dark text-light submit-button ${allAnswered ? 'fixed-bottom d-flex justify-content-center align-items-center' : 'd-none'}`} onClick={() => navigate('/results')}>SUBMIT</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","C:\\projects\\sports-pickem-app\\src\\components\\ChooseSeason\\SeasonTab.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Game\\GameLogic.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Game\\PickCard\\PickButton.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Banner\\Banner.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Results\\Results.js",["103"],"import { navigate } from \"hookrouter\";\r\nimport { useEffect, useState } from \"react\";\r\nimport LoadScreen from \"../LoadScreen/LoadScreen\";\r\nimport { gradePicks, updateRecord } from './ResultsLogic';\r\n\r\n\r\nconst Results = (props) => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        if(props.randomEvents.length) {\r\n            let grade = gradePicks(props.picks, props.randomEvents);\r\n            console.log(grade);\r\n            updateRecord(grade, props.record, props.setRecord, props.chosenSeason);\r\n            setLoading(!loading);\r\n        }\r\n    }, [props.randomEvents]);\r\n\r\n    if(loading) {\r\n        return <LoadScreen />\r\n    }\r\n    return (\r\n        <div className='container-fluid'>\r\n            <p>{`Your Overall Record: ${props.record.overall.correct}/${props.record.overall.total}`}</p>\r\n            <p>{`Your record for the ${props.chosenSeason} season: ${props.record.years[props.chosenSeason].correct}/${props.record.years[props.chosenSeason].total}`}</p>\r\n\r\n            <div className='row'>\r\n                <div className='btn btn-success' onClick={props.playAgain}>Keep Season and Play Again?</div>\r\n                <div className='btn btn-warning' onClick={props.resetSeason}>Change Season and Play Again?</div>\r\n                <div className='btn btn-primary' onClick={() => navigate('/record')}>View Record</div>\r\n                <div className='btn btn-danger' onClick={props.resetGame}>Quit? (reset progress)</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results","C:\\projects\\sports-pickem-app\\src\\components\\Results\\ResultsLogic.js",["104","105"],"import _ from 'lodash';\r\n\r\nexport const gradePicks = (picks, randomEvents) => {\r\n    let grade = [];\r\n    console.log(randomEvents);\r\n    randomEvents.map((randomEvent, pickNumber) => {\r\n        grade.push(analyzeOne(randomEvent, picks[pickNumber]));\r\n    })\r\n\r\n    return grade\r\n}\r\n\r\nexport const analyzeOne = (randomEvent, pick) => {\r\n    let winner = getWinner(randomEvent);\r\n    if(pick === winner) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const getWinner = (randomEvent) => {\r\n        \r\n    if(randomEvent['intHomeScore'] >= randomEvent['intAwayScore']) {\r\n        return randomEvent['strHomeTeam']\r\n    } else {\r\n        return randomEvent['strAwayTeam']\r\n    }\r\n\r\n}\r\n\r\nexport const updateRecord = (grade, record, setterMethod, year) => {\r\n\r\n    let deepClone = _.cloneDeep(record);\r\n    \r\n    if(!deepClone.years[year]) {\r\n        deepClone.years[year] = {\r\n            correct: 0,\r\n            total: 0\r\n        }\r\n    }\r\n\r\n    grade.map((val) => {\r\n        deepClone.overall.total++\r\n        deepClone.years[year].total++;\r\n        if(val) {\r\n            deepClone.overall.correct++;\r\n            deepClone.years[year].correct++;\r\n        }\r\n    });\r\n\r\n    setterMethod(deepClone);\r\n\r\n}","C:\\projects\\sports-pickem-app\\src\\components\\services.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Record\\Record.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Record\\SeasonRecord.js",[],"C:\\projects\\sports-pickem-app\\src\\components\\Record\\RecordLogic.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":21,"nodeType":"112","messageId":"113","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"114","line":16,"column":20,"nodeType":"112","messageId":"113","endLine":16,"endColumn":25},{"ruleId":"106","replacedBy":"115"},{"ruleId":"108","replacedBy":"116"},{"ruleId":"110","severity":1,"message":"117","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":18},{"ruleId":"110","severity":1,"message":"118","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"119","line":2,"column":21,"nodeType":"112","messageId":"113","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"120","line":2,"column":20,"nodeType":"112","messageId":"113","endLine":2,"endColumn":35},{"ruleId":"110","severity":1,"message":"121","line":14,"column":13,"nodeType":"112","messageId":"113","endLine":14,"endColumn":20},{"ruleId":"110","severity":1,"message":"114","line":14,"column":22,"nodeType":"112","messageId":"113","endLine":14,"endColumn":27},{"ruleId":"122","severity":1,"message":"123","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":14,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"123","line":34,"column":8,"nodeType":"124","endLine":34,"endColumn":22,"suggestions":"126"},{"ruleId":"122","severity":1,"message":"127","line":19,"column":8,"nodeType":"124","endLine":19,"endColumn":28,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":6,"column":48,"nodeType":"131","messageId":"132","endLine":6,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":43,"column":21,"nodeType":"131","messageId":"132","endLine":43,"endColumn":23},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-unused-vars","'navigate' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.",["133"],["134"],"'useQuery' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useSubscription' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["135"],["136"],"React Hook useEffect has missing dependencies: 'loading' and 'props'. Either include them or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loading' in the 'setLoading' call.",["137"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [data, props]",{"range":"144","text":"145"},"Update the dependencies array to be: [props, props.events]",{"range":"146","text":"147"},"Update the dependencies array to be: [loading, props, props.randomEvents]",{"range":"148","text":"149"},[836,842],"[data, props]",[1053,1067],"[props, props.events]",[620,640],"[loading, props, props.randomEvents]"]